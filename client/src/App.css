/* // App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import HomePage from './components/HomePage';
import SignUpPage from './components/SignUpPage';
import LoginPage from './components/LoginPage';
import AdminDashboard from './components/AdminDashboard';
import NavBar from './components/NavBar';
import { AuthProvider, useAuth } from './context/AuthContext';
import './App.css';

// Protected route component for admin-only access
const ProtectedRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();
  return isAuthenticated ? children : <Navigate to="/login" />;
};

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="min-h-screen bg-gray-100">
          <NavBar />
          <div className="container mx-auto py-8 px-4">
            <Routes>
              <Route path="/" element={<HomePage />} />
              <Route path="/signup" element={<SignUpPage />} />
              <Route path="/login" element={<LoginPage />} />
              <Route 
                path="/admin" 
                element={
                  <ProtectedRoute>
                    <AdminDashboard />
                  </ProtectedRoute>
                } 
              />
            </Routes>
          </div>
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

// context/AuthContext.js
import React, { createContext, useContext, useState } from 'react';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);

  const login = (username, password) => {
    // In a real app, this would call your backend API
    if (username === "admin" && password === "123") {
      setIsAuthenticated(true);
      setUser({ username: "admin", role: "admin" });
      return true;
    }
    return false;
  };

  const logout = () => {
    setIsAuthenticated(false);
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// components/NavBar.js
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const NavBar = () => {
  const { isAuthenticated, logout } = useAuth();

  return (
    <nav className="bg-blue-600 text-white shadow-lg">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center py-4">
          <div className="text-xl font-bold">Visitor Management System</div>
          <div className="flex space-x-4">
            <Link to="/" className="hover:text-blue-200">Home</Link>
            <Link to="/signup" className="hover:text-blue-200">Register Visit</Link>
            {isAuthenticated ? (
              <>
                <Link to="/admin" className="hover:text-blue-200">Admin Dashboard</Link>
                <button onClick={logout} className="hover:text-blue-200">Logout</button>
              </>
            ) : (
              <Link to="/login" className="hover:text-blue-200">Admin Login</Link>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};

export default NavBar;

// components/HomePage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const HomePage = () => {
  const [visitors, setVisitors] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchVisitors = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/visitors');
        setVisitors(response.data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching visitors:', error);
        setLoading(false);
      }
    };

    fetchVisitors();
  }, []);

  return (
    <div>
      <h1 className="text-3xl font-bold text-center mb-8">Welcome to Visitor Management System</h1>
      
      <div className="bg-white shadow rounded-lg p-6 mb-8">
        <h2 className="text-xl font-semibold mb-4">Recent Visitors</h2>
        {loading ? (
          <p className="text-center">Loading visitor data...</p>
        ) : visitors.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full bg-white">
              <thead>
                <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
                  <th className="py-3 px-6 text-left">Visitor ID</th>
                  <th className="py-3 px-6 text-left">Name</th>
                  <th className="py-3 px-6 text-left">Vehicle Type</th>
                  <th className="py-3 px-6 text-left">Date</th>
                  <th className="py-3 px-6 text-left">Status</th>
                </tr>
              </thead>
              <tbody className="text-gray-600 text-sm">
                {visitors.map((visitor) => (
                  <tr key={visitor.id} className="border-b border-gray-200 hover:bg-gray-100">
                    <td className="py-3 px-6">{visitor.visitorNumber}</td>
                    <td className="py-3 px-6">{visitor.username}</td>
                    <td className="py-3 px-6">{visitor.vehicleType}</td>
                    <td className="py-3 px-6">{new Date(visitor.dateOfVisit).toLocaleDateString()}</td>
                    <td className="py-3 px-6">
                      <span className={`py-1 px-3 rounded-full text-xs ${
                        visitor.status === 'Complete' ? 'bg-green-200 text-green-700' : 
                        visitor.status === 'Approved' ? 'bg-blue-200 text-blue-700' :
                        visitor.status === 'Rejected' ? 'bg-red-200 text-red-700' : 
                        'bg-yellow-200 text-yellow-700'
                      }`}>
                        {visitor.status || 'Pending'}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p className="text-center">No visitor records found.</p>
        )}
      </div>
    </div>
  );
};

export default HomePage;

// components/SignUpPage.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const SignUpPage = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    username: '',
    idNumber: '',
    idType: 'aadhar', // Default ID type
    vehicleType: '',
    vehicleNumber: '',
    inTime: '',
    duration: '',
    dateOfVisit: '',
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      await axios.post('http://localhost:5000/api/visitors', formData);
      alert('Visit registered successfully!');
      navigate('/');
    } catch (error) {
      console.error('Error registering visit:', error);
      setError('Failed to register visit. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-8">
      <h1 className="text-2xl font-bold text-center mb-6">Register New Visit</h1>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-gray-700 mb-2">Full Name</label>
            <input
              type="text"
              name="username"
              value={formData.username}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div>
            <label className="block text-gray-700 mb-2">ID Type</label>
            <select
              name="idType"
              value={formData.idType}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            >
              <option value="aadhar">Aadhar Card</option>
              <option value="pan">PAN Card</option>
            </select>
          </div>
          
          <div>
            <label className="block text-gray-700 mb-2">ID Number</label>
            <input
              type="text"
              name="idNumber"
              value={formData.idNumber}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div>
            <label className="block text-gray-700 mb-2">Vehicle Type</label>
            <input
              type="text"
              name="vehicleType"
              value={formData.vehicleType}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div>
            <label className="block text-gray-700 mb-2">Vehicle Number</label>
            <input
              type="text"
              name="vehicleNumber"
              value={formData.vehicleNumber}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div>
            <label className="block text-gray-700 mb-2">In Time</label>
            <input
              type="time"
              name="inTime"
              value={formData.inTime}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div>
            <label className="block text-gray-700 mb-2">Duration (minutes)</label>
            <input
              type="number"
              name="duration"
              value={formData.duration}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
              min="1"
            />
          </div>
          
          <div>
            <label className="block text-gray-700 mb-2">Date of Visit</label>
            <input
              type="date"
              name="dateOfVisit"
              value={formData.dateOfVisit}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
        </div>
        
        <div className="mt-8 text-center">
          <button
            type="submit"
            className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
            disabled={loading}
          >
            {loading ? 'Registering...' : 'Register Visit'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default SignUpPage;

// components/LoginPage.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const LoginPage = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleSubmit = (e) => {
    e.preventDefault();
    setError('');
    
    if (login(username, password)) {
      navigate('/admin');
    } else {
      setError('Invalid credentials. Please try again.');
    }
  };

  return (
    <div className="max-w-md mx-auto bg-white rounded-lg shadow-md p-8">
      <h1 className="text-2xl font-bold text-center mb-6">Admin Login</h1>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label className="block text-gray-700 mb-2" htmlFor="username">
            Username
          </label>
          <input
            type="text"
            id="username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        
        <div className="mb-6">
          <label className="block text-gray-700 mb-2" htmlFor="password">
            Password
          </label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        
        <div className="text-center">
          <button
            type="submit"
            className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
          >
            Login
          </button>
        </div>
      </form>
      
      <div className="mt-4 text-sm text-gray-600 text-center">
        <p>Admin access only. For visitors, please use the registration page.</p>
      </div>
    </div>
  );
};

export default LoginPage;

// components/AdminDashboard.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';

const AdminDashboard = () => {
  const { isAuthenticated } = useAuth();
  const [visitors, setVisitors] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');
  
  useEffect(() => {
    if (!isAuthenticated) return;
    
    const fetchVisitors = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/visitors');
        setVisitors(response.data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching visitors:', error);
        setLoading(false);
      }
    };

    fetchVisitors();
  }, [isAuthenticated]);

  const handleStatusChange = async (visitorId, newStatus) => {
    try {
      await axios.put(`http://localhost:5000/api/visitors/${visitorId}/status`, { status: newStatus });
      setVisitors(visitors.map(visitor => 
        visitor.id === visitorId ? { ...visitor, status: newStatus } : visitor
      ));
    } catch (error) {
      console.error('Error updating visitor status:', error);
    }
  };

  const handleDelete = async (visitorId) => {
    if (window.confirm('Are you sure you want to delete this visitor record?')) {
      try {
        await axios.delete(`http://localhost:5000/api/visitors/${visitorId}`);
        setVisitors(visitors.filter(visitor => visitor.id !== visitorId));
      } catch (error) {
        console.error('Error deleting visitor:', error);
      }
    }
  };

  const generatePdf = async (visitorId) => {
    try {
      const response = await axios.get(`http://localhost:5000/api/visitors/${visitorId}/pdf`, {
        responseType: 'blob'
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `visitor-${visitorId}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error('Error generating PDF:', error);
    }
  };

  const filteredVisitors = filter === 'all' 
    ? visitors 
    : visitors.filter(visitor => visitor.status?.toLowerCase() === filter);

  return (
    <div>
      <h1 className="text-2xl font-bold mb-6">Admin Dashboard</h1>
      
      <div className="mb-4">
        <label className="mr-2">Filter by status:</label>
        <select 
          value={filter} 
          onChange={(e) => setFilter(e.target.value)}
          className="px-3 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="all">All</option>
          <option value="pending">Pending</option>
          <option value="approved">Approved</option>
          <option value="rejected">Rejected</option>
          <option value="complete">Complete</option>
        </select>
      </div>
      
      {loading ? (
        <p className="text-center">Loading visitor data...</p>
      ) : filteredVisitors.length > 0 ? (
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white shadow-md rounded-lg overflow-hidden">
            <thead className="bg-gray-800 text-white">
              <tr>
                <th className="py-3 px-4 text-left">Visitor #</th>
                <th className="py-3 px-4 text-left">Name</th>
                <th className="py-3 px-4 text-left">ID</th>
                <th className="py-3 px-4 text-left">Vehicle</th>
                <th className="py-3 px-4 text-left">Date</th>
                <th className="py-3 px-4 text-left">Duration</th>
                <th className="py-3 px-4 text-left">Status</th>
                <th className="py-3 px-4 text-left">Actions</th>
              </tr>
            </thead>
            <tbody className="text-gray-700">
              {filteredVisitors.map((visitor) => (
                <tr key={visitor.id} className="border-b hover:bg-gray-50">
                  <td className="py-3 px-4">{visitor.visitorNumber}</td>
                  <td className="py-3 px-4">{visitor.username}</td>
                  <td className="py-3 px-4">
                    {visitor.idType}: {visitor.idNumber}
                  </td>
                  <td className="py-3 px-4">
                    {visitor.vehicleType} - {visitor.vehicleNumber}
                  </td>
                  <td className="py-3 px-4">
                    {new Date(visitor.dateOfVisit).toLocaleDateString()}
                  </td>
                  <td className="py-3 px-4">{visitor.duration} min</td>
                  <td className="py-3 px-4">
                    <span className={`py-1 px-2 rounded-full text-xs ${
                      visitor.status === 'Complete' ? 'bg-green-200 text-green-700' : 
                      visitor.status === 'Approved' ? 'bg-blue-200 text-blue-700' :
                      visitor.status === 'Rejected' ? 'bg-red-200 text-red-700' : 
                      'bg-yellow-200 text-yellow-700'
                    }`}>
                      {visitor.status || 'Pending'}
                    </span>
                  </td>
                  <td className="py-3 px-4">
                    <div className="flex space-x-2">
                      {visitor.status !== 'Approved' && visitor.status !== 'Rejected' && (
                        <button
                          onClick={() => handleStatusChange(visitor.id, 'Approved')}
                          className="bg-blue-500 hover:bg-blue-600 text-white text-xs py-1 px-2 rounded"
                        >
                          Approve
                        </button>
                      )}
                      
                      {visitor.status !== 'Rejected' && visitor.status !== 'Complete' && (
                        <button
                          onClick={() => handleStatusChange(visitor.id, 'Rejected')}
                          className="bg-red-500 hover:bg-red-600 text-white text-xs py-1 px-2 rounded"
                        >
                          Reject
                        </button>
                      )}
                      
                      {visitor.status === 'Approved' && (
                        <button
                          onClick={() => handleStatusChange(visitor.id, 'Complete')}
                          className="bg-green-500 hover:bg-green-600 text-white text-xs py-1 px-2 rounded"
                        >
                          Complete
                        </button>
                      )}
                      
                      {visitor.status === 'Complete' && (
                        <button
                          onClick={() => generatePdf(visitor.id)}
                          className="bg-purple-500 hover:bg-purple-600 text-white text-xs py-1 px-2 rounded"
                        >
                          PDF
                        </button>
                      )}
                      
                      <button
                        onClick={() => handleDelete(visitor.id)}
                        className="bg-gray-500 hover:bg-gray-600 text-white text-xs py-1 px-2 rounded"
                      >
                        Delete
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <p className="text-center">No visitor records found.</p>
      )}
    </div>
  );
};

export default AdminDashboard;

// App.css */
body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
    Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}